/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 *  NGI-ChIPseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Variable to specify the docker / singularity image tag to use
// Picks up on use of -r 1.3 in nextflow command
wf_container = { "scilifelab/ngi-chipseq:${workflow.revision ? workflow.revision : 'latest'}" }

// Global default params, used in configs
params {
  outdir = './results'
  igenomes_base = "./iGenomes"
  clusterOptions = false
}

profiles {

  standard {
    includeConfig 'conf/base.config'
    includeConfig 'conf/igenomes.config'
  }
  uppmax {
    includeConfig 'conf/base.config'
    includeConfig 'conf/uppmax.config'
    includeConfig 'conf/igenomes.config'
  }
  uppmax_devel {
    includeConfig 'conf/base.config'
    includeConfig 'conf/uppmax.config'
    includeConfig 'conf/uppmax-devel.config'
    includeConfig 'conf/igenomes.config'
  }
  docker {
    includeConfig 'conf/base.config'
    includeConfig 'conf/docker.config'
    includeConfig 'conf/igenomes.config'
  }
  aws {
    includeConfig 'conf/base.config'
    includeConfig 'conf/aws.config'
    includeConfig 'conf/igenomes.config'
  }
  none {
    // Don't load any config (for use with custom home configs)
  }

}


timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/NGI-MethylSeq_timeline.html"
}
trace {
  enabled = true
  file = "${params.outdir}/pipeline_info/NGI-MethylSeq_trace.txt"
}

manifest {
  homePage = 'https://github.com/SciLifeLab/NGI-MethylSeq'
  description = 'Methylation (Bisulfite-Sequencing) Best Practice analysis pipeline, used at the SciLifeLab National Genomics Infrastructure.'
  mainScript = 'bismark.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
